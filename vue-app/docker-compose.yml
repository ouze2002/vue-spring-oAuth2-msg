services:
  # Nginx 컨테이너: Vue 앱 서빙 및 요청 라우팅
  nginx:
    build: ./vue-app
    container_name: nginx
    ports:
      - "80:80"
    networks:
      - my-network
    

  # Spring Boot 컨테이너: 백엔드 API
  java-app:
    build: ./java-app
    container_name: java-app
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=changeme
    networks:
      - my-network
    depends_on:
      # Redis가 헬스 체크를 통과한 후에 시작됩니다.
      redis:
        condition: service_healthy
      # PostgreSQL은 컨테이너가 시작되면 바로 연결을 시도할 수 있습니다.
      postgres:
        condition: service_started

    # 헬스 체크 설정: 애플리케이션의 /actuator/health 엔드포인트 확인
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Redis 컨테이너
  redis:
    image: redis:latest
    container_name: redis-server
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my-network
    # Redis 헬스 체크 설정: redis-cli를 이용해 'ping' 명령어로 준비 상태 확인
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL 컨테이너: 데이터베이스
  postgres:
    image: postgres:latest
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeme
      POSTGRES_DB: mydatabase
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  postgres-data: